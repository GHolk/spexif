// Generated by CoffeeScript 1.12.1
(function() {
  var CacheImage, ImageList, ImageManager, getSelectedImages, myMap,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  myMap = spexif.myMap;

  CacheImage = spexif.CacheImage;

  getSelectedImages = spexif.domHelper.getSelectedImages;

  ImageList = (function() {
    function ImageList() {
      this.list = [];
    }

    ImageList.prototype.add = function(cacheImage) {
      return this.list.push(cacheImage);
    };

    ImageList.prototype.remove = function(cacheImage) {
      return this.list = this.list.filter(function(image) {
        return image !== cacheImage;
      });
    };

    return ImageList;

  })();

  ImageManager = (function(superClass) {
    var arrayBufferToBinaryString;

    extend(ImageManager, superClass);

    function ImageManager() {
      this.list = [];
      this.map = myMap;
      this.asideNode = document.getElementById('image-container');
      this.select = new ImageList();
    }

    arrayBufferToBinaryString = function(arraybuffer) {
      var charCode, charCodeToChar, u8;
      u8 = new Uint8Array(arraybuffer);
      charCodeToChar = String.fromCharCode;
      return ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = u8.length; i < len; i++) {
          charCode = u8[i];
          results.push(charCodeToChar(charCode));
        }
        return results;
      })()).join('');
    };

    ImageManager.prototype.addFromBlob = function(blob) {
      var reader, url, whenArrayBufferRead;
      url = URL.createObjectURL(blob);
      reader = new FileReader();
      whenArrayBufferRead = (function(_this) {
        return function() {
          var image;
          image = new CacheImage(url, arrayBufferToBinaryString(reader.result));
          _this.add(image);
          return _this.show(image);
        };
      })(this);
      reader.onload = whenArrayBufferRead;
      return reader.readAsArrayBuffer(blob);
    };

    ImageManager.prototype.show = function(image) {
      if (image.mapPoint) {
        return this.showInMap(image);
      } else {
        return this.showAside(image);
      }
    };

    ImageManager.prototype.showInMap = function(image) {
      return this.map.showPoint(image);
    };

    ImageManager.prototype.showAside = function(image) {
      return this.asideNode.appendChild(image.toHTMLNode());
    };

    ImageManager.prototype.removeFromMap = function(image) {
      return this.map.removePoint(image);
    };

    ImageManager.prototype.updatePoint = function(image) {
      this.removeFromMap(image);
      image.updatePoint();
      return this.show(image);
    };

    ImageManager.prototype.addFromURL = function(url) {
      var request;
      request = new XMLHttpRequest();
      request.open('GET', url, true);
      request.responseType = 'blob';
      request.onreadystatechange = (function(_this) {
        return function() {
          var req;
          req = request;
          if (req.readyState === 4 && req.status === 200) {
            return _this.addFromBlob(req.response);
          }
        };
      })(this);
      return request.send('');
    };

    ImageManager.prototype.getSelectedImages = function() {
      return this.list.filter(function(cacheImage) {
        return cacheImage.toHTMLNode().getElementsByTagName('input')[0].checked;
      });
    };

    return ImageManager;

  })(ImageList);

  spexif.imageManager = new ImageManager();

}).call(this);
