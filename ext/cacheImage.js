// Generated by CoffeeScript 1.12.1
(function() {
  var CacheImage, FilterPiexif, Image64, binaryStringToImage64, createInfoNode, myMap, speaker;

  myMap = spexif.myMap;

  speaker = spexif.speaker;

  FilterPiexif = spexif.FilterPiexif;

  createInfoNode = spexif.domHelper.createInfoNode;

  binaryStringToImage64 = function(binaryString, fileName) {
    var blob, i, j, len, u8, x;
    u8 = new Uint8Array(binaryString.length);
    for (i = j = 0, len = u8.length; j < len; i = ++j) {
      x = u8[i];
      u8[i] = binaryString.charCodeAt(i);
    }
    blob = new File([u8], fileName, {
      type: 'image/jpeg'
    });
    return new Image64(URL.createObjectURL(blob), binaryString, blob);
  };

  Image64 = (function() {
    function Image64(url, data, blob) {
      if (url.slice(0, 23) === 'data:image/jpeg;base64,') {
        this.dataType = 'dataURL';
        this.url = url;
        this.data = atob(url.slice(23));
      } else if (data.slice(0, 2) === "\xff\xd8") {
        this.dataType = 'binaryString';
        this.url = url || 'data:image/jpeg;base64,' + btoa(data);
        this.data = data;
        this.blob = blob;
      } else {
        speaker.errorFriendly('input is not jpeg file!');
        throw new Error('input is not jpeg file!');
      }
    }

    Image64.prototype.toString = function() {
      return this.data;
    };

    return Image64;

  })();

  CacheImage = (function() {
    var createEXIF, createPoint;

    createEXIF = function(data) {
      return new FilterPiexif(piexif.load(data));
    };

    createPoint = function(image) {
      if (image.exif.gps.length === 2) {
        return myMap.createPoint(image);
      } else {
        return null;
      }
    };

    function CacheImage(url, data, blob) {
      this.fullImage = new Image64(url, data, blob);
      this.exif = createEXIF(data);
      this.updateHTMLNode();
      this.mapPoint = createPoint(this);
    }

    CacheImage.prototype.updateImage = function() {
      var newImageString, oldBlob;
      newImageString = piexif.insert(this.exif.getBinaryString(), this.fullImage.data);
      oldBlob = this.fullImage.blob;
      this.fullImage = binaryStringToImage64(newImageString, oldBlob.name);
      this.updateHTMLNode();
      myMap.updateInfoWindow(this);
      return speaker.logFriendly('update image exif.');
    };

    CacheImage.prototype.change = null;

    CacheImage.prototype.HTMLNode = null;

    CacheImage.prototype.updateHTMLNode = function() {
      var isChecked;
      if (this.HTMLNode) {
        isChecked = this.select();
      }
      this.HTMLNode = createInfoNode(this);
      if (isChecked) {
        return this.select(isChecked);
      }
    };

    CacheImage.prototype.select = function(tf) {
      var checkNode;
      checkNode = this.HTMLNode.getElementsByTagName('input')[0];
      if (tf === true) {
        return checkNode.checked = true;
      } else if (tf === false) {
        return checkNode.checked = false;
      } else {
        return checkNode.checked;
      }
    };

    return CacheImage;

  })();

  spexif.CacheImage = CacheImage;

}).call(this);
