// Generated by CoffeeScript 1.12.1
(function() {
  var CacheImage, ImageManager, getSelectedImages, myMap, speaker;

  myMap = spexif.myMap;

  CacheImage = spexif.CacheImage;

  getSelectedImages = spexif.domHelper.getSelectedImages;

  speaker = spexif.speaker;

  ImageManager = (function() {
    var arrayBufferToBinaryString;

    ImageManager.prototype.add = function(cacheImage) {
      return this.list.push(cacheImage);
    };

    function ImageManager() {
      this.list = [];
      this.map = myMap;
      this.asideNode = document.getElementById('image-container');
    }

    arrayBufferToBinaryString = function(arraybuffer) {
      var charCode, charCodeToChar, u8;
      u8 = new Uint8Array(arraybuffer);
      charCodeToChar = String.fromCharCode;
      return ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = u8.length; i < len; i++) {
          charCode = u8[i];
          results.push(charCodeToChar(charCode));
        }
        return results;
      })()).join('');
    };

    ImageManager.prototype.addFromBlob = function(blob) {
      var reader, theImageList, url;
      url = URL.createObjectURL(blob);
      reader = new FileReader();
      theImageList = this;
      reader.onload = function() {
        var image;
        image = new CacheImage(url, arrayBufferToBinaryString(this.result), blob);
        theImageList.add(image);
        return theImageList.show(image);
      };
      return reader.readAsArrayBuffer(blob);
    };

    ImageManager.prototype.show = function(image) {
      if (image.mapPoint) {
        return this.showInMap(image);
      } else {
        return this.showAside(image);
      }
    };

    ImageManager.prototype.showInMap = function(image) {
      return this.map.showPoint(image);
    };

    ImageManager.prototype.showAside = function(image) {
      return this.asideNode.appendChild(image.toHTMLNode());
    };

    ImageManager.prototype.changeImageNameInServer = [];

    ImageManager.prototype.addFromURL = function(url) {
      var addBlobImageToList, fileName, request, theImageNameList;
      fileName = decodeURIComponent(url.replace(/^.*\//, ''));
      request = new XMLHttpRequest();
      request.open('GET', url);
      if (this.changeImageNameInServer.some(function(name) {
        return name === fileName;
      })) {
        request.setRequestHeader('Cache-Control', 'no-cache');
        this.changeImageNameInServer = this.changeImageNameInServer.filter(function(name) {
          return name !== fileName;
        });
      }
      request.responseType = 'blob';
      addBlobImageToList = this.addFromBlob.bind(this);
      request.onload = function() {
        return addBlobImageToList(new File([this.response], fileName));
      };
      theImageNameList = this.changeImageNameInServer;
      request.onerror = function() {
        theImageNameList.push(fileName);
        speaker.errorFriendly(new Error("can not load image " + fileName + " from server."));
        return speaker.error(new Error("can not load " + url));
      };
      return request.send();
    };

    ImageManager.prototype.getChangedImages = function() {
      return this.list.filter(function(cacheImage) {
        return cacheImage.change;
      });
    };

    ImageManager.prototype.getSelectedImages = function() {
      return this.list.filter(function(cacheImage) {
        return cacheImage.select();
      });
    };

    ImageManager.prototype.writeImages = function(imageArray) {
      if (imageArray == null) {
        imageArray = this.getSelectedImages();
      }
      imageArray.forEach(function(image) {
        return image.updateImage();
      });
      return this.selectImages(imageArray);
    };

    ImageManager.prototype.selectImages = function(imageArray) {
      if (imageArray == null) {
        imageArray = this.list;
      }
      return imageArray.forEach(function(image) {
        return image.select(true);
      });
    };

    ImageManager.prototype.clearSelect = function(imageArray) {
      if (imageArray == null) {
        imageArray = this.list;
      }
      return imageArray.forEach(function(image) {
        return image.select(false);
      });
    };

    ImageManager.prototype.invertSelect = function(imageArray) {
      if (imageArray == null) {
        imageArray = this.list;
      }
      return imageArray.forEach(function(image) {
        var isCheck;
        isCheck = image.select();
        return image.select(!isCheck);
      });
    };

    ImageManager.prototype.selectByDate = function(startDate, endDate, selectMethod) {
      if (typeof selectMethod !== 'function') {
        selectMethod = function(image) {
          return image.select(true);
        };
      }
      return this.list.filter(function(image) {
        return !(image.exif.date < startDate) && !(image.exif.date > endDate);
      }).forEach(selectMethod);
    };

    ImageManager.prototype.remove = function(imageArray) {
      if (imageArray == null) {
        imageArray = this.getSelectedImages();
      }
      imageArray.forEach(function(image) {
        return myMap.removePoint(image);
      });
      return this.list = this.list.filter(function(image) {
        return !imageArray.some(function(imageInput) {
          return imageInput === image;
        });
      });
    };

    ImageManager.prototype.selectByCircle = function(gps, radius) {
      var latlng;
      latlng = gps.slice().reverse();
      return this.list.filter(function(image) {
        return radius >= myMap.distanceBetweenPoint(latlng, image.mapPoint);
      }).forEach(function(image) {
        return image.select(true);
      });
    };

    return ImageManager;

  })();

  spexif.imageManager = new ImageManager();

}).call(this);
