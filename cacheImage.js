// Generated by CoffeeScript 1.12.1
(function() {
  var CacheImage, FilterPiexif, ImageList, imageList, myMap,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  myMap = window.myMap;

  ImageList = (function(superClass) {
    extend(ImageList, superClass);

    function ImageList() {
      this.map = myMap;
    }

    ImageList.prototype.add = function(image) {
      this.push(image);
      return this.show(image);
    };

    ImageList.prototype.show = function(image) {
      return this.map.showPoint(image);
    };

    return ImageList;

  })(Array);

  imageList = new ImageList();

  CacheImage = (function() {
    function CacheImage(dataURL) {
      this.dataURL = dataURL;
      this.createEXIF();
      this.createImageNode();
      this.createHTMLNode();
      this.createPoint();
      imageList.add(this);
    }

    CacheImage.prototype.createPoint = function() {
      return this.mapPoint = myMap.createPoint(this);
    };

    CacheImage.prototype.createImageNode = function() {
      var imageNode;
      imageNode = document.createElement('img');
      imageNode.src = this.dataURL;
      return this.imageNode = imageNode;
    };

    CacheImage.prototype.createHTMLNode = function() {
      var HTMLNode;
      HTMLNode = document.createElement('div');
      HTMLNode.appendChild(this.imageNode);
      HTMLNode.appendChild(this.exif.HTMLNode);
      return this.HTMLNode = HTMLNode;
    };

    CacheImage.prototype.createEXIF = function() {
      var halfExif;
      halfExif = piexif.load(this.dataURL);
      return this.exif = new FilterPiexif(halfExif);
    };

    return CacheImage;

  })();

  FilterPiexif = (function() {
    function FilterPiexif(exif) {
      var err;
      try {
        this.date = this.getDate(exif.Exif);
      } catch (error) {
        err = error;
        console.error("can't get date of photo. ");
        console.error(err);
      }
      try {
        this.maker = this.getMaker(exif['0th']);
      } catch (error) {
        err = error;
        console.error("can't get camera of photo. ");
        console.error(err);
      }
      try {
        this.gps = [this.getGPS(exif.GPS, "GPSLongitude"), this.getGPS(exif.GPS, "GPSLatitude")];
      } catch (error) {
        err = error;
        console.error("can't get gps data of photo. ");
        console.error(err);
      }
      this.createHTMLNode();
    }

    FilterPiexif.prototype.getMaker = function(exif) {
      return exif[piexif.ImageIFD.Make].trim();
    };

    FilterPiexif.prototype.getDate = function(exif) {
      var date;
      date = exif[piexif.ExifIFD.DateTimeOriginal].split(' ');
      date[0] = date[0].replace(/:/g, '-');
      return date.join('T');
    };

    FilterPiexif.prototype.getGPS = function(exif, key) {
      var decimal, dms, i, len, part, ratio;
      dms = exif[piexif.GPSIFD[key]];
      ratio = 1;
      decimal = 0;
      for (i = 0, len = dms.length; i < len; i++) {
        part = dms[i];
        decimal += part[0] / part[1] / ratio;
        ratio *= 60;
      }
      return decimal;
    };

    FilterPiexif.prototype.createHTMLNode = function() {
      var HTMLNode;
      HTMLNode = document.createElement('pre');
      HTMLNode.textContent = [this.date, this.maker, this.gps].join('\n');
      return this.HTMLNode = HTMLNode;
    };

    return FilterPiexif;

  })();

  window.CacheImage = CacheImage;

  window.imageList = imageList;

}).call(this);
